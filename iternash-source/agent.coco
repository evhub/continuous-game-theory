from pprint import pprint

from bbopt import BlackBoxOptimizer
from bbopt.constants import default_alg

from iternash.util import Str, printret


no_default = object()
_no_default_passed = object()

class Agent:
    """Agent class.

    Parameters:
    - _name_ is the key to assign this agent's action in the environment, or None
        for no name.
    - _actor_ is a function from the environment to the agent's action.
    - _default_ is the agent's initial action.
    - _period_ is the period at which to call the agent (default is 1).
    """

    def __init__(self, name, actor, default=no_default, period=1):
        self.name = name
        self.actor = actor
        self.default = default
        self.period = period

    def __call__(self, env):
        """Call the agent's actor function."""
        try:
            return self.actor(env)
        except:
            print(f"Error calculating action for {self}:")
            raise

    def __repr__(self) =
        f"Agent({self.name})"

    def has_default(self) =
        """Whether the agent has a default."""
        self.default is not no_default

    def clone(self, name=None, actor=None, default=_no_default_passed, period=None):
        """Create a copy of the agent (optionally) with new parameters."""
        if default is _no_default_passed:
            default = self.default
        return Agent(name ?? self.name, actor ?? self.actor, default, period ?? self.period)


def agent(name_or_agent_func=None, **kwargs):
    """Decorator for easily constructing agents.

    If a string is passed to the decorator it will use that as the name,
    otherwise the name is inferred from the name of the function.

    Examples:

        @agent()  # or just @agent
        def x(env) =
            ...

        @agent("x")
        def x_agent(env) =
            ...

        @agent(name="x", default=...)
        def x_agent(env) =
            ...
    """
    if name_or_agent_func is None:
        return agent$(**kwargs)
    elif isinstance(name_or_agent_func, Str) or name_or_agent_func is None:
        return Agent$(name, **kwargs)
    elif "name" in kwargs:
        return Agent(kwargs.pop("name"), name_or_agent_func, **kwargs)
    else:
        return Agent(name_or_agent_func.__name__, name_or_agent_func, **kwargs)


default_expr_aliases = {
    "\n": "",
    "^": "**",
}

def expr_agent(name, expr, vars={}, aliases=default_expr_aliases, eval=eval, **kwargs):
    """Construct an agent that computes its action by evaluating an expression.

    Parameters:
    - _name_ is the name the agent's action will be assigned in the environment.
    - _expr_ is an expression to be evaluated in the environment to determine the
        agent's action.
    - _vars_ are the globals to be used for evaluating the agent's action.
    - _aliases_ are simple replacements to be made to the expr before evaluating it
        (the default is {"\\n": "", "^": "**"}).
    - _eval_ is the eval function to use (defaults to Python eval, but can be set to
        coconut.convenience.coconut_eval instead to use Coconut eval).
    - _kwargs_ are passed to `Agent`.
    """
    for k, v in aliases.items():
        expr = expr.replace(k, v)
    return Agent(name, eval$(expr, vars), **kwargs)


def human_agent(name, vars={}, aliases=default_expr_aliases, **kwargs):
    """Construct an agent that prompts a human for an expression as in expr_agent."""
    def human_actor(env) =
        clean_env = env.copy()
        del clean_env["game"]
        pprint(clean_env)
        eval(input(f"{name} = "), vars, env)
    return Agent(name, human_actor, **kwargs)


def bbopt_agent(name, tunable_actor, util_func, file, alg=default_alg, **kwargs):
    """Construct an agent that selects its action using a black box optimizer.

    Parameters:
    - _name_ is the name the agent's action will be assigned in the environment.
    - _tunable_actor_ is a function from (bb, env) to an action (see the BBopt docs
        for how to use the bb object to define tunable parameters).
    - _util_func_ is the a function from the env resulting from the agent's action
        to the utility it should get for that action.
    - _file_ should be set to __file__.
    - _alg_ determines the black box optimization algorithm to use (the default
        is tree_structured_parzen_estimator).
    - _kwargs_ are passed to `Agent`.
    """
    def bbopt_actor(env):
        match {=(name + "_bb"): bb, **_} in env:
            bb.maximize(util_func(env))
        else:
            bb = BlackBoxOptimizer(file=file, tag=env["game"].name + "_" + name)
            env[name + "_bb"] = bb
        bb.run(alg=alg if not env["game"].final_step else None)
        return tunable_actor(bb, env)
    return Agent(name, bbopt_actor, **kwargs)


def debug_agent(debug_str, name=None, **kwargs) =
    """Construct an agent that prints a formatted debug string.

    Example:
        debug_agent("x = {x}")
            is roughly equivalent to
        Agent(None, env -> print("x = {x}".format(**env)))
    """
    Agent(name, env -> debug_str.format(**env) |> printret, **kwargs)


def debug_all_agent(**kwargs) =
    """Construct an agent that prints the entire env."""
    debug_agent("{game.env}", **kwargs)
