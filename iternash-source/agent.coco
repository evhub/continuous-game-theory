import math

from bbopt import BlackBoxOptimizer
from bbopt.constants import default_alg


no_default = object()

class Agent:
    def __init__(self, name is str, actor, default=no_default, debug=False):
        self.name = name
        if isinstance(actor, Agent):
            self.actor = actor.actor
            self.default = default if default is not no_default else actor.default
            self.debug = debug or actor.debug
        else:
            self.actor = actor
            self.default = default
            self.debug = debug

    def __call__(self, env):
        if callable(self.actor):
            action = self.actor(env)
        else:
            action = self.actor
        if self.debug:
            print(f"{self.name} = {action}")
        return action

    def __str__(self) =
        self.name

    def has_default(self) =
        self.default is not no_default


def agent(name_or_agent_func, **kwargs):
    """Decorator for easily constructing Agents."""
    if isinstance(name_or_agent_func, str):
        return Agent$(name, **kwargs)
    else:
        return Agent(name_or_agent_func.__name__, name_or_agent_func, **kwargs)


default_expr_aliases = {
    "\n": "",
    "^": "**",
}

def expr_agent(name, expr, globs=vars(math), aliases=default_expr_aliases, **kwargs):
    """Construct an agent that evaluates the given expression."""
    for k, v in aliases.items():
        expr = expr.replace(k, v)
    return Agent(name, eval$(expr, globs), **kwargs)


def bbopt_agent(name, rand_actor, util_func, file, alg=default_alg, **kwargs):
    """Construct an agent that uses BBopt to maximize some utility."""
    bb = BlackBoxOptimizer(file=file, tag=name)
    first_action = [True]
    def bbopt_actor(env):
        if first_action[0]:
            first_action[0] = False
        else:
            bb.maximize(util_func(env))
        bb.run(alg=alg if not env["final_step"] else None)
        return rand_actor(bb, env)
    return Agent(name, bbopt_actor, **kwargs)
