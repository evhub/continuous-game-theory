from pprint import pprint
from collections import deque

from bbopt import BlackBoxOptimizer
from bbopt.constants import default_alg

from iternash.util import Str, printret, printerr, clean_env


no_default = object()
_sentinel = object()

class Agent:
    """Agent class.

    Parameters:
    - _name_ is the key to assign this agent's action in the environment, or None
        for no name.
    - _actor_ is a function from the environment to the agent's action.
    - _default_ is the agent's initial action.
    - _period_ is the period at which to call the agent (default is 1).
    - _copy_func_ determines the function used to copy the agent's action (default is identity).
    - _debug_ controls whether the agent should print what it's doing.
    """

    def __init__(self, name, actor, default=no_default, period=1, copy_func=None, debug=False):
        self.name = name
        self.actor = actor
        self.default = default
        self.period = period
        self.copy_func = copy_func
        self.debug = debug

    def clone(self, name=None, actor=None, default=_sentinel, period=None, copy_func=_sentinel, debug=None):
        """Create a copy of the agent (optionally) with new parameters."""
        if default is _sentinel:
            default = self.default
        if copy_func is _sentinel:
            copy_func = self.copy_func
        return Agent(name ?? self.name, actor ?? self.actor, default, period ?? self.period, copy_func, debug ?? self.debug)

    def __call__(self, env):
        """Call the agent's actor function."""
        try:
            result = self.actor(env)
            if self.debug:
                print(f"{self}({env}) = {result}")
            return result
        except:
            printerr(f"Error calculating action for {self}({env}):")
            raise

    def __repr__(self) =
        f"Agent({self.name})"

    def has_default(self) =
        """Whether the agent has a default."""
        self.default is not no_default


def agent(name_or_agent_func=None, **kwargs):
    """Decorator for easily constructing agents.

    If a string is passed to the decorator it will use that as the name,
    otherwise the name is inferred from the name of the function.

    Examples:

        @agent()  # or just @agent
        def x(env) =
            ...

        @agent("x")
        def x_agent(env) =
            ...

        @agent(name="x", default=...)
        def x_agent(env) =
            ...
    """
    if name_or_agent_func is None:
        return agent$(**kwargs)
    elif isinstance(name_or_agent_func, Str):
        return Agent$(name_or_agent_func, **kwargs)
    elif "name" in kwargs:
        return Agent(kwargs.pop("name"), name_or_agent_func, **kwargs)
    else:
        return Agent(name_or_agent_func.__name__, name_or_agent_func, **kwargs)


DEFAULT_EXPR_ALIASES = {
    "\n": "",
}

def expr_agent(name, expr, vars={}, aliases=DEFAULT_EXPR_ALIASES, eval=eval, **kwargs):
    """Construct an agent that computes its action by evaluating an expression.

    Parameters:
    - _name_ is the name the agent's action will be assigned in the environment.
    - _expr_ is an expression to be evaluated in the environment to determine the
        agent's action.
    - _vars_ are the globals to be used for evaluating the agent's action.
    - _aliases_ are simple replacements to be made to the expr before evaluating it
        (the default is {"\\n": "", "^": "**"}).
    - _eval_ is the eval function to use (defaults to Python eval, but can be set to
        coconut.convenience.coconut_eval instead to use Coconut eval).
    - _kwargs_ are passed to `Agent`.
    """
    for k, v in aliases.items():
        expr = expr.replace(k, v)
    return Agent(name, eval$(expr, vars), **kwargs)


def human_agent(name, pprint=True, vars={}, aliases=DEFAULT_EXPR_ALIASES, eval=eval, **kwargs):
    """Construct an agent that prompts a human for an expression as in expr_agent.

    Parameters are as per expr_agent plus _pprint_ which determines whether to
    pretty print the environment for the human."""
    def human_actor(env):
        if pprint:
            pprint(clean_env(env))
        expr = input(f"{name} = ")
        return expr_agent(expr, vars, aliases, eval)(env)
    return Agent(name, human_actor, **kwargs)


def bbopt_agent(name, tunable_actor, util_func, file, alg=default_alg, **kwargs):
    """Construct an agent that selects its action using a black box optimizer.

    Parameters:
    - _name_ is the name the agent's action will be assigned in the environment.
    - _tunable_actor_ is a function from (bb, env) to an action (see the BBopt docs
        for how to use the bb object to define tunable parameters).
    - _util_func_ is the a function from the env resulting from the agent's action
        to the utility it should get for that action.
    - _file_ should be set to __file__.
    - _alg_ determines the black box optimization algorithm to use (the default
        is tree_structured_parzen_estimator).
    - _kwargs_ are passed to `Agent`.
    """
    def bbopt_actor(env):
        match {=(name + "_bb"): bb, **_} in env:
            bb.maximize(util_func(env))
        else:
            bb = BlackBoxOptimizer(file=file, tag=env["game"].name + "_" + name)
            env[name + "_bb"] = bb
        bb.run(alg=alg if not env["game"].final_step else None)
        return tunable_actor(bb, env)
    return Agent(name, bbopt_actor, **kwargs)


def debug_agent(debug_str, name=None, **kwargs) =
    """Construct an agent that prints a formatted debug string.

    Example:
        debug_agent("x = {x}")
            is roughly equivalent to
        Agent(None, env -> print("x = {x}".format(**env)))
    """
    Agent(name, env -> debug_str.format(**env) |> printret, **kwargs)


def debug_all_agent(pretty=True, **kwargs) =
    """Construct an agent that prints the entire env, prettily if _pretty_."""
    print_func = pprint if pretty else print
    Agent(None, env -> print_func(clean_env(env)), **kwargs)


def init_agent(name, constant) =
    """Construct an agent that just initializes name to the given constant."""
    Agent(name, env -> constant, default=constant, period=float("inf"))


def hist_agent(name, maxhist=None, initializer=(), **kwargs):
    """Construct an agent that records a history of the given name.

    Parameters:
    - _maxhist_ is the maximum history to store.
    - _initializer_ is an iterable to fill the initial history with.
    - _kwargs_ are passed to Agent.
    """
    hist_name = name + "_hist"
    def hist_actor(env):
        env[hist_name].append(env[name])
        return env[hist_name]
    init_hist = [] if maxhist is None else deque(maxlen=maxhist)
    for x in initializer:
        init_hist.append(x)
    return Agent(hist_name, hist_actor, default=init_hist, **kwargs)
