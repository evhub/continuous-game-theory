no_default = object()

class Agent:
    def __init__(self, name is str, actor, default=no_default, debug=False):
        self.name = name
        if isinstance(actor, Agent):
            self.actor = actor.actor
            self.default = default if default is not no_default else actor.default
            self.debug = debug or actor.debug
        else:
            self.actor = actor
            self.default = default
            self.debug = debug

    def __call__(self, env):
        if callable(self.actor):
            action = self.actor(env)
        else:
            action = self.actor
        if self.debug:
            print(f"{self.name} = {action}")
        return action

    def __str__(self) =
        self.name

    def has_default(self) =
        self.default is not no_default


def agent(name is str) =
    Agent$(name)

addpattern def agent(agent_func) =
    """Decorator for easily constructing Agents."""
    Agent(agent_func_or_name.__name__, agent_func_or_name)


default_expr_aliases = {
    "\n": "",
    "^": "**",
}

def expr_agent(name, expr, default=no_default, globs=None, aliases=default_expr_aliases, debug=False):
    """Construct an agent that evaluates the given expression."""
    for k, v in aliases.items():
        expr = expr.replace(k, v)
    return Agent(name, eval$(expr, globs), default=default, debug=debug)
