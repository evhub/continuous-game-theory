import random
from math import log

from iternash import (
    expr_agent,
    bbopt_agent,
    Game,
)


common_params = dict(
    # number of deployment episodes
    m=100,
    # desired PC for the n agent to attempt to achieve
    eps=0.01,
    # probability of training defection leading to no reward for that agent
    p_mod=0.9,
    # utility for defecting during training
    r_n=0,
    # utility for defecting during deployment
    r_m=1,
    # utility for never defecting
    r_f=0,
    # minimum n/m for the black-box-optimized n agent to check
    min_n_m=0.1,
    # maximum n/m for the black-box-optimized n agent to check
    max_n_m=10000,
)


# conservative estimate of required training episodes
conservative_n_agent = expr_agent(
    name="n",
    expr="m/p_mod * (1-eps)/eps",
)


# optimal defection probability in the sequential defection game
seq_d_p_agent = expr_agent(
    name="p",
    # TODO: Verify this formula holds.
    expr="""(
    (n * p_mod - (d-1)/(1-p))
    / (n * p_mod + m - (d-1)/(1-p))
    * (r_m - r_n)/(r_m - r_f)
)^(1/(m-d))""",
    default=0.9,
)


# probability of catastrophe in the sequential defection game
seq_d_PC_agent = expr_agent(
    name="PC",
    # TODO: Verify this formula in light of the new nonseq_2d_PC.
    expr="(1-p)^(d-1) * (1 - p^(m-d+1))",
    default=0.1,
)


# optimal defection probability in the non-sequential two defection game
nonseq_2d_p_agent = expr_agent(
    name="p",
    # TODO: Needs to be recalculated for the new nonseq_2d_PC.
    expr="""(
    (n * p_mod)
    / (n * p_mod + m^2 - m)
    * (r_m - r_n)/(r_m - r_f)
)^(1/(m-1))""",
    default=0.9,
)


# probability of catastrophe in the non-sequential two defection game
nonseq_2d_PC_agent = expr_agent(
    name="PC",
    expr="1 - (m-1)*(1-p)*p^(m-1) - p**m",
    default=0.1,
)


# black-box-optimized n agent that attempts to set PC to eps
bbopt_n_agent = bbopt_agent(
    name="n",
    tunable_actor=(bb, env) ->
        int(env["m"] * bb.loguniform("n/m", env["min_n_m"], env["max_n_m"])),
    util_func=env -> -abs(log(env["PC"]) - log(env["eps"])),
    file=__file__,
)


# absent-minded driver game where catastrophe occurs if there are
#  ever d sequential defections during deployment
seq_d_game = Game(
    # necessary number of sequential defections
    d=2,
    n=conservative_n_agent,
    p=seq_d_p_agent,
    PC=seq_d_PC_agent,
    **common_params,
)


# absent-minded driver game where catastrophe occurs upon the
#  second defection during deployment
nonseq_2d_game = Game(
    n=bbopt_n_agent,
    p=nonseq_2d_p_agent,
    PC=nonseq_2d_PC_agent,
    **common_params,
)



if __name__ == "__main__":
    print("Running sequential defection game...")
    seq_d_game.attach(env -> print("p = {p}; PC = {PC}".format(**env)))
    seq_d_game.run() |> print

    print("Running non-sequential two defection game...")
    nonseq_2d_game.attach(env -> print("n = {n}; p = {p}; PC = {PC}".format(**env)))
    nonseq_2d_game.run() |> print
