from tqdm import tqdm

from iternash.util import Str
from iternash.agent import Agent


class Game:
    """Game class.

    Parameters:
    - _name_ is the name of the game.
    - _agents_ are agents to include in the environment. (name, agent) tuples
        are also allowed.
    - _named_agents_ are names mapped to agents to give those names to in the
        env. _named_agents come after agents in an arbitrary order.
    - _independent_update_ controls whether agents are evaluated independently
        or sequentially (defaults to False). When the updates are sequential
        the order of agents passed to Game will be the order in which they
        are evaluated at each step.
    """
    final_step = False

    match def __init__(self, name is Str, *agents, independent_update=False, default_run_steps=1000, **named_agents):
        self.name = name
        self.env = {"game": self}
        self.agents = []
        self.independent_update = independent_update
        self.default_run_steps = default_run_steps
        self.i = 0
        self.add_agents(*agents, **named_agents)

    def add_agents(self, *agents, **named_agents):
        """Add the given agents/variables to the game."""
        for a in agents :: named_agents.items():
            match (name, actor) in a:
                if not callable(actor):
                    assert isinstance(name, Str), f"not isinstance({name}, Str)"
                    self.env[name] = actor
                    continue
                elif isinstance(actor, Agent):
                    a = actor.clone(name=name)
                else:
                    a = Agent(name, actor)
            assert isinstance(a, Agent), f"not isinstance({a}, Agent)"
            if a.has_default() and a.name is not None:
                self.env[a.name] = a.default
            self.agents.append(a)

    def attach(self, agent, period, name=None):
        """Add an agent to be called at interval _period_."""
        if isinstance(agent, Agent):
            agent = agent.clone(name=name, period=period)
        else:
            agent = Agent(name, agent, period=period)
        self.agents.append(agent)

    def step(self):
        """Perform one full step of action selection."""
        updating_env = {} if self.independent_update else self.env
        for a in self.agents:
            if self.i % a.period == 0:
                action = a(self.env)
                if a.name is not None:
                    updating_env[a.name] = action
        if self.independent_update:
            self.env.update(updating_env)
        self.i += 1
        return self.env

    def run(self, n=None):
        """Run _n_ steps of iterative action selection."""
        for _ in tqdm(range(n ?? self.default_run_steps)):
            self.step()
        return self.finalize()

    @property
    def max_period(self) =
        max(a.period for a in self.agents)

    def finalize(self):
        """Gather final parameters."""
        self.final_step = True
        try:
            for _ in range(self.max_period):
                self.step()
            return self.env
        finally:
            self.final_step = False
