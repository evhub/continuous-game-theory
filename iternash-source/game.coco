from copy import deepcopy

from tqdm import tqdm

from iternash.util import Str
from iternash.agent import Agent


class Game:
    """Game class. See Game.setup for information on __init__ parameters."""
    final_step = False

    def __init__(self, *args, **kwargs):
        self.env = {"game": self}
        self.agents = {}
        self.handlers = []
        self.immediate_update = True
        self.setup(*args, **kwargs)

    match def setup(self, name is Str, *agents, immediate_update=None, **named_agents):
        """Initialize the game with agents/variables.

        Parameters:
        - _name_ is the name of the game.
        - _agents_ are agents to include in the environment.
        - _named_agents_ are names mapped to agents to give those names to
            in the environment.
        - _immediate_update_ controls whether new actions are added to the env
            immediately or only at the end of each step (defaults to True). When
            this is on the order of agents passed to Game should be the order in
            which they should be evaluated at each step.
        """
        self.name = name
        if immediate_update is not None:
            self.immediate_update = immediate_update
        self.i = 0
        for a in agents :: named_agents.items():
            match (name, actor) in a:
                if not callable(actor):
                    assert isinstance(name, Str), f"not isinstance({name}, Str)"
                    self.env[name] = actor
                    continue
                elif isinstance(actor, Agent):
                    a = actor.clone(name=name)
                else:
                    a = Agent(name, actor)
            assert isinstance(a, Agent), f"not isinstance({a}, Agent)"
            if a.name is not None:
                if a.has_default():
                    self.env[a.name] = a.default
                self.agents[a.name] = a
        self.step()

    def attach(self, handler, period=100):
        """Attach a handler to be called at interval _period_. _handler_ should be
        some function which takes in an env."""
        self.handlers.append((handler, period))

    def call_handlers(self):
        """Call all attached handlers."""
        for handler, period in self.handlers:
            if self.i % period == 0:
                handler(self.env)

    def step(self, final=False):
        """Perform one full step of action selection."""
        if final:
            self.final_step = True
            try:
                return self.step()
            finally:
                self.final_step = False
        else:
            updating_env = self.env if self.immediate_update else {}
            for a in self.agents.values():
                action = a(self.env)
                if a.name is not None:
                    updating_env[a.name] = action
            if not self.immediate_update:
                self.env.update(updating_env)
            self.i += 1
            self.call_handlers()
            return self.env

    def run(self, max_steps=500):
        """Iterate until equilibrium or _max_steps_ is reached."""
        for _ in tqdm(range(max_steps)):
            prev_env = deepcopy(self.env)
            self.step()
            if self.env == prev_env:
                break
        return self.step(final=True)

    def clone(self, name=None, *args, **kwargs):
        """Create a copy of the environment (optionally) with new parameters."""
        new_game = deepcopy(self)
        new_game.setup(name ?? self.name, *args, **kwargs)
        return new_game
